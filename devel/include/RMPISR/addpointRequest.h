// Generated by gencpp from file RMPISR/addpointRequest.msg
// DO NOT EDIT!


#ifndef RMPISR_MESSAGE_ADDPOINTREQUEST_H
#define RMPISR_MESSAGE_ADDPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace RMPISR
{
template <class ContainerAllocator>
struct addpointRequest_
{
  typedef addpointRequest_<ContainerAllocator> Type;

  addpointRequest_()
    : pointArray()
    , destArray()
    , type(false)
    , size(0)
    , size_dest(0)  {
    }
  addpointRequest_(const ContainerAllocator& _alloc)
    : pointArray(_alloc)
    , destArray(_alloc)
    , type(false)
    , size(0)
    , size_dest(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pointArray_type;
  _pointArray_type pointArray;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _destArray_type;
  _destArray_type destArray;

   typedef uint8_t _type_type;
  _type_type type;

   typedef int32_t _size_type;
  _size_type size;

   typedef int32_t _size_dest_type;
  _size_dest_type size_dest;





  typedef boost::shared_ptr< ::RMPISR::addpointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RMPISR::addpointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct addpointRequest_

typedef ::RMPISR::addpointRequest_<std::allocator<void> > addpointRequest;

typedef boost::shared_ptr< ::RMPISR::addpointRequest > addpointRequestPtr;
typedef boost::shared_ptr< ::RMPISR::addpointRequest const> addpointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RMPISR::addpointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RMPISR::addpointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace RMPISR

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'RMPISR': ['/home/rmp/catkin_ws/src/RMPISR/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::RMPISR::addpointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RMPISR::addpointRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RMPISR::addpointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RMPISR::addpointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RMPISR::addpointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RMPISR::addpointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RMPISR::addpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fca49ca1a51aa0c3cdeb5f4e59c200d6";
  }

  static const char* value(const ::RMPISR::addpointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfca49ca1a51aa0c3ULL;
  static const uint64_t static_value2 = 0xcdeb5f4e59c200d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::RMPISR::addpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RMPISR/addpointRequest";
  }

  static const char* value(const ::RMPISR::addpointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RMPISR::addpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] pointArray\n\
geometry_msgs/Point[] destArray\n\
bool type\n\
int32 size\n\
int32 size_dest\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::RMPISR::addpointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RMPISR::addpointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pointArray);
      stream.next(m.destArray);
      stream.next(m.type);
      stream.next(m.size);
      stream.next(m.size_dest);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct addpointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RMPISR::addpointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RMPISR::addpointRequest_<ContainerAllocator>& v)
  {
    s << indent << "pointArray[]" << std::endl;
    for (size_t i = 0; i < v.pointArray.size(); ++i)
    {
      s << indent << "  pointArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.pointArray[i]);
    }
    s << indent << "destArray[]" << std::endl;
    for (size_t i = 0; i < v.destArray.size(); ++i)
    {
      s << indent << "  destArray[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.destArray[i]);
    }
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
    s << indent << "size_dest: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size_dest);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RMPISR_MESSAGE_ADDPOINTREQUEST_H
