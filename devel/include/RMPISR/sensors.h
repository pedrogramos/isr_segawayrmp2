// Generated by gencpp from file RMPISR/sensors.msg
// DO NOT EDIT!


#ifndef RMPISR_MESSAGE_SENSORS_H
#define RMPISR_MESSAGE_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace RMPISR
{
template <class ContainerAllocator>
struct sensors_
{
  typedef sensors_<ContainerAllocator> Type;

  sensors_()
    : ir1(0.0)
    , ir2(0.0)
    , ir3(0.0)
    , ir4(0.0)
    , s1(0.0)
    , s2(0.0)
    , s5(0.0)  {
    }
  sensors_(const ContainerAllocator& _alloc)
    : ir1(0.0)
    , ir2(0.0)
    , ir3(0.0)
    , ir4(0.0)
    , s1(0.0)
    , s2(0.0)
    , s5(0.0)  {
  (void)_alloc;
    }



   typedef float _ir1_type;
  _ir1_type ir1;

   typedef float _ir2_type;
  _ir2_type ir2;

   typedef float _ir3_type;
  _ir3_type ir3;

   typedef float _ir4_type;
  _ir4_type ir4;

   typedef float _s1_type;
  _s1_type s1;

   typedef float _s2_type;
  _s2_type s2;

   typedef float _s5_type;
  _s5_type s5;





  typedef boost::shared_ptr< ::RMPISR::sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RMPISR::sensors_<ContainerAllocator> const> ConstPtr;

}; // struct sensors_

typedef ::RMPISR::sensors_<std::allocator<void> > sensors;

typedef boost::shared_ptr< ::RMPISR::sensors > sensorsPtr;
typedef boost::shared_ptr< ::RMPISR::sensors const> sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RMPISR::sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RMPISR::sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace RMPISR

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'RMPISR': ['/home/rmp/catkin_ws/src/RMPISR/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::RMPISR::sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RMPISR::sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RMPISR::sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RMPISR::sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RMPISR::sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RMPISR::sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RMPISR::sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ccb7a54de940f8793e51caa067484500";
  }

  static const char* value(const ::RMPISR::sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xccb7a54de940f879ULL;
  static const uint64_t static_value2 = 0x3e51caa067484500ULL;
};

template<class ContainerAllocator>
struct DataType< ::RMPISR::sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RMPISR/sensors";
  }

  static const char* value(const ::RMPISR::sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RMPISR::sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ir1\n\
float32 ir2\n\
float32 ir3\n\
float32 ir4\n\
float32 s1\n\
float32 s2\n\
float32 s5\n\
";
  }

  static const char* value(const ::RMPISR::sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RMPISR::sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ir1);
      stream.next(m.ir2);
      stream.next(m.ir3);
      stream.next(m.ir4);
      stream.next(m.s1);
      stream.next(m.s2);
      stream.next(m.s5);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RMPISR::sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RMPISR::sensors_<ContainerAllocator>& v)
  {
    s << indent << "ir1: ";
    Printer<float>::stream(s, indent + "  ", v.ir1);
    s << indent << "ir2: ";
    Printer<float>::stream(s, indent + "  ", v.ir2);
    s << indent << "ir3: ";
    Printer<float>::stream(s, indent + "  ", v.ir3);
    s << indent << "ir4: ";
    Printer<float>::stream(s, indent + "  ", v.ir4);
    s << indent << "s1: ";
    Printer<float>::stream(s, indent + "  ", v.s1);
    s << indent << "s2: ";
    Printer<float>::stream(s, indent + "  ", v.s2);
    s << indent << "s5: ";
    Printer<float>::stream(s, indent + "  ", v.s5);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RMPISR_MESSAGE_SENSORS_H
